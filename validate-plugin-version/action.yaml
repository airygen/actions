name: Validate WordPress Plugin Version
description: Validate release tag, README Stable tag, and plugin header version.
inputs:
  plugin_file:
    required: true
    description: Main plugin file (e.g., airyseo.php)

outputs:
  tag:
    description: Normalized tag (without leading v)
    value: ${{ steps.validate.outputs.tag }}
  publish:
    description: Whether to publish (string "true" | "false")
    value: ${{ steps.validate.outputs.publish }}

runs:
  using: "composite"
  steps:
    - name: Validate version and decide publish
      id: validate
      shell: bash
      env:
        PLUGIN_FILE: ${{ inputs.plugin_file }}
      run: |
        set -euo pipefail

        RELEASE_TAG="${{ github.event.release.tag_name }}"
        TAG="${RELEASE_TAG#v}"   # strip leading v if present

        # Default outputs (ensure always set)
        printf 'tag=%s\n' "$TAG" >> "$GITHUB_OUTPUT"
        echo "publish=false" >> "$GITHUB_OUTPUT"

        # Case-insensitive README.txt at repo root
        README_FILE=$(ls -1 | grep -i -x 'readme.txt' | head -n1 || true)
        [[ -n "$README_FILE" ]] || { echo "README.txt not found (case-insensitive)"; exit 1; }

        if [[ "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          [[ -f "$README_FILE" ]] || { echo "README file not found at path: $README_FILE"; exit 1; }
          [[ -f "$PLUGIN_FILE" ]] || { echo "Plugin main file not found: $PLUGIN_FILE"; exit 1; }

          STABLE_TAG=$(sed -nE 's/^Stable tag:[[:space:]]*([^[:space:]]+).*$/\1/p' "$README_FILE" | head -n1)
          [[ -n "$STABLE_TAG" ]] || { echo "Stable tag not found in $README_FILE"; exit 1; }

          PLUGIN_VERSION=$(sed -nE 's/^[[:space:]]*(\*?[[:space:]]*)?Version:[[:space:]]*([0-9][^[:space:]]*).*/\2/p' "$PLUGIN_FILE" | head -n1)
          [[ -n "$PLUGIN_VERSION" ]] || { echo "Version header not found in $PLUGIN_FILE"; exit 1; }

          echo "Release tag: $RELEASE_TAG"
          echo "Normalized tag: $TAG"
          echo "Stable tag: $STABLE_TAG"
          echo "Plugin version: $PLUGIN_VERSION"

          if [[ "$STABLE_TAG" != "trunk" && "$TAG" != "$STABLE_TAG" ]]; then
            echo "Release tag and Stable tag do not match"; exit 1
          fi
          if [[ "$TAG" != "$PLUGIN_VERSION" ]]; then
            echo "Release tag and Plugin version do not match"; exit 1
          fi

          echo "Version check passed for official release"
          echo "publish=true" >> "$GITHUB_OUTPUT"
        else
          echo "Pre-release detected ($RELEASE_TAG). Will build but skip deploy."
        fi
